Javascript
Primitive types                                                                                                   
String: for strings. A string may have one or more characters
Number: for numbers of any kind: integer or floating-point.
Boolean: for true/false
Undefined: for unassigned values
Null: for unknown values
Symbol: for unique identifiers.
Complex types
Objects: for more complex data structures.
Functions

typeof operator returns the type of the argument

typeof undefined // "undefined"                                  
typeof 0 // "number"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"  (1)
typeof null // "object"  (2)
typeof alert // "function"  (3)
typeof [] // "object"

For to check type of and arrray  - Object.prototype.toString.call([])// [object Array]
For null returns "object" � this is an error in the language, it�s not actually an object.


Functions:
Function Expression : let sayHi = function() { ... };
arrow functions : let func = (arg1, arg2, ...argN) => expression

Arrays:
arr.push(...items) � adds items to the end,
arr.pop() � extracts an item from the end,
arr.shift() � extracts an item from the beginning,
arr.unshift(...items) � adds items to the beginning.

arr.splice(index[, deleteCount, elem1, ..., elemN]) :-
 it starts from the position index: removes deleteCount elements and then inserts elem1, ..., elemN at their place. Returns the array of removed elements.
ex:1-
let arr = ["I", "study", "JavaScript", "right", "now"];
// remove 3 first elements and replace them with another
arr.splice(0, 3, "Let's", "dance");
alert( arr ) // now ["Let's", "dance", "right", "now"]
ex:2-
let arr = ["I", "study", "JavaScript"];
// from index 2
// delete 0
// then insert "complex" and "language"
arr.splice(2, 0, "complex", "language");
alert( arr ); // "I", "study", "complex", "language", "JavaScript"

arr.slice(start, end) - It returns a new array containing all items from index "start" to "end" (not including "end")
let arr = ["t", "e", "s", "t"];
alert( arr.slice(1, 3) ); // e,s

arr.concat(arg1, arg2...) -joins the array with other arrays and/or items.It accepts any number of arguments � either arrays or values.
let arr = [1, 2];
// merge arr with [3,4]
alert( arr.concat([3, 4])); // 1,2,3,4
// merge arr with [3,4] and [5,6]
alert( arr.concat([3, 4], [5, 6])); // 1,2,3,4,5,6
// merge arr with [3,4], then add values 5 and 6
alert( arr.concat([3, 4], 5, 6)); // 1,2,3,4,5,6

arr.forEach:- method allows to run a function for every element of the array.
arr.forEach(function(item, index, array) {
  // ... do something with item
});

arr.indexOf(item, from) � looks for item starting from index from, and returns the index where it was found, otherwise -1.
arr.lastIndexOf(item, from) � same, but looks for from right to left.
arr.includes(item, from) � looks for item starting from index from, returns true if found.

find, filter and findIndex: -
The find() method returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.
arr.find(function(item, index, array) {
  // if true is returned, item is returned and iteration is stopped
  // for falsy scenario returns undefined
});
var array1 = [5, 12, 8, 130, 44];
var found = array1.find(function(element) {
  return element > 10;
});
console.log(found);
// expected output: 12

The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.
var array1 = [5, 12, 8, 130, 44];

function isLargeNumber(element) {
  return element > 13;
}
console.log(array1.findIndex(isLargeNumber));
// expected output: 3

The filter() method creates a new array with all elements that pass the test implemented by the provided function.
let results = arr.filter(function(item, index, array) {
  // if true item is pushed to results and iteration continues
  // returns empty array for complete falsy scenario
});
var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]

arr.map -It calls the function for each element of the array and returns the array of results.
The map() method creates a new array with the results of calling a provided function on every element in the calling array.
let result = arr.map(function(item, index, array) {
  // returns the new value instead of item
})
var array1 = [1, 4, 9, 16];
// pass a function to map
const map1 = array1.map(x => x * 2);
console.log(map1);
// expected output: Array [2, 8, 18, 32]

arr.reduce -

let value = arr.reduce(function(previousValue, item, index, array) {
  // ...
}, initial);
item � is the current array item.
index � is its position.
array � is the array.
previousValue � is the result of the previous function call,
initial - for the first call.
let arr = [1, 2, 3, 4, 5];
let result = arr.reduce((sum, current) => sum + current, 0);
alert(result); // 15

arr.sort - sorts the array in place.
The items are sorted as strings by default.
to use our own sorting order, we need to supply a function of two arguments as the argument of arr.sort()
ex:
function compareNumeric(a, b) {
  if (a > b) return 1;
  if (a == b) return 0;
  if (a < b) return -1;
}
let arr = [ 1, 2, 15 ];
arr.sort(compareNumeric);
alert(arr);  // 1, 2, 15

Actually, a comparison function is only required to return a positive number to say �greater� and a negative number to say �less�.
let arr = [ 1, 2, 15 ];
arr.sort(function(a, b) { return a - b; });
alert(arr);  // 1, 2, 15

arr.reverse - reverses the order of elements in arr.
let arr = [1, 2, 3, 4, 5];
arr.reverse();
alert( arr ); // 5,4,3,2,1

str.split(delim) - It splits the string into an array by the given delimiter delim
The split method has an optional second numeric argument � a limit on the array length. If it is provided, then the extra elements are ignored
let names = 'Bilbo, Gandalf, Nazgul';
let arr = names.split(', ');
for (let name of arr) {
  alert( `A message to ${name}.` ); // A message to Bilbo  (and other names)
}

let arr = 'Bilbo, Gandalf, Nazgul, Saruman'.split(', ', 2);
alert(arr); // Bilbo, Gandalf

arr.join-
The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.
let arr = ['Bilbo', 'Gandalf', 'Nazgul'];
let str = arr.join(';');
alert( str ); // Bilbo;Gandalf;Nazgul

array.isArray - The Array.isArray() method determines whether the passed value is an Array.
in ES5- Object.prototype.toString.call(arg) 
Array.isArray([1, 2, 3]);  // true
alert(typeof {}); // object
alert(typeof []); // object

Object creation:
------------------

a) Execution with Object constructor:  var rect1 = new Object();
The new keyword performs following four tasks:

1.It creates new empty object e.g. obj = { };
2.It sets new empty object's invisible 'prototype'(�__proto__�) property to be the constructor function's visible and accessible 'prototype'(Foo.prototype) property. (Every function has visible 'prototype' property whereas every object includes invisible 'prototype' property)
3.It binds property or function which is declared with this keyword to the new object.
4.It returns newly created object unless the constructor function returns a non-primitive value (custom JavaScript object). If constructor function does not include return statement then compiler will insert 'return this;' implicitly at the end of the function. If the constructor function returns a primitive value then it will be ignored.

b) Execution with Object literal: var rect1 = {};
When the system finds {} on the RHS of equal to symbol, it follows 3 steps
1. Creates a new empty object
2. Sets the value of implicit prototype �__proto__� of a new empty object to Object.prototype
3. Returns the reference of new object